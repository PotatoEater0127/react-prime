"use strict";const index=()=>"const md5File = require('md5-file');\nconst path = require('path');\n\n// Ignore CSS styles imported on load\nconst ignoreStyles = require('ignore-styles');\nconst register = ignoreStyles.default;\n\n// When running locally these will load from a standard import\n// When running on the server, we want to load via their hashed version in the build folder\nconst extensions = ['.gif', '.jpeg', '.jpg', '.png', '.svg'];\n\n// Override the default style ignorer, also modifying all image requests\nregister(ignoreStyles.DEFAULT_EXTENSIONS, (mod, filename) => {\n  if (!extensions.find(f => filename.endsWith(f))) {\n    // If we find a style\n    return ignoreStyles.noOp();\n  }\n  const hash = md5File.sync(filename).slice(0, 8);\n  const bn = path.basename(filename).replace(/(\\.\\w{3})$/, `.${hash}$1`);\n  \n  mod.exports = `/static/media/${bn}`;\n});\n\n// require babel to transpile JSX\n// allow imports and code splitting through plugins\nrequire('babel-register')({\n  ignore: /\\/(build|node_modules)\\//,\n  presets: ['env', 'react-app'],\n  plugins: [\n    'syntax-dynamic-import',\n    'dynamic-import-node',\n    'react-loadable/babel'\n  ]\n});\n\n// import the server\nrequire('./server');";module.exports=index;const createCompareHTML=e=>`<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8">\n    <title>React Prime</title>\n    <style>\n      html, body {\n        margin: 0;\n        padding: 0;\n      }\n  \n      body {\n        background-color: white;\n      }\n  \n      p {\n        text-align: center;\n        font-family: Arial, Helvetica, sans-serif;\n      }\n  \n      #top-logo {\n        padding: 20px;\n        background-color: black;\n        margin: 0 auto;\n        width: 100%;\n      }\n  \n      #top-logo img {\n        margin-left: 2%;\n      }\n  \n      #iframe-wrapper {\n        margin-left: 4%;\n        margin-right: 4%;\n        margin-top: 10px;\n        width: 100%;\n      }\n  \n      #csr-div {\n        margin-right: 40px;\n      }\n  \n      #csr-div, #ssr-div {\n        margin-bottom: 20px;\n      }\n  \n      #csr-iframe,\n      #ssr-iframe {\n        width: 100%;\n        height: 420px;\n        border: 0px;\n        padding: 2px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n      }\n  \n      #csr-report-iframe,\n      #ssr-report-iframe {\n        width: 100%;\n        height: 420px;\n      }\n  \n      #csr-div,\n      #ssr-div {\n        width: 44%;\n        float: left;\n      }\n  \n      #button1 {\n        text-align: center;\n      }\n  \n      #button2 {\n        text-align: center;\n      }\n  \n      .btn {\n        padding: 10px 25px;\n        font-size: 15px;\n        font-family: Arial, Helvetica, sans-serif;\n        text-decoration: none;\n        color: #fff;\n        position: relative;\n        border-left: 8px solid #4d1551;\n        cursor: pointer;\n        margin-top: 20px;\n        margin-bottom: 20px;\n        margin-left: auto;\n        margin-right: auto;\n        width: 130px;\n      }\n  \n      .purple {\n        background-color: #9b59b6;\n      }\n  \n      .purple:hover {\n        background-color: #B573D0;\n      }\n  </style>\n  </head>\n  <body>\n    <div id="top-logo"><img src="https://s3-us-west-1.amazonaws.com/reactprimeimages/primeLogo.png" width="200"></div>\n    <div id="iframe-wrapper">\n      <div id="csr-div">\n        <div>\n          <p>Client-Side Rendered</p>\n        </div>\n        <iframe id="csr-iframe" src="http://localhost:${e.port}"></iframe>\n        <div>\n          <div id="button1" class="btn purple" onClick='document.getElementById("csr-report-iframe").src="http://localhost:5050/csr-report";window.scrollBy(0, 600);' className="btn purple">VIEW\n            REPORT\n          </div>\n          <iframe id='csr-report-iframe' frameborder="0"></iframe>\n        </div>\n      </div>\n      <div id="ssr-div">\n        <div>\n          <p>Server-Side Rendered</p>\n        </div>\n        <iframe id="ssr-iframe" src="http://localhost:8080"></iframe>\n        <div>\n          <div id="button2" class="btn purple" onClick='document.getElementById("ssr-report-iframe").src="http://localhost:5050/ssr-report";window.scrollBy(0, 600);' className="btn purple">VIEW\n            REPORT\n          </div>\n          <iframe id='ssr-report-iframe' frameborder="0"></iframe>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>`;module.exports=createCompareHTML;const createConfig=()=>"module.exports = {\n  extends: 'lighthouse:default',\n  settings: {\n    throttlingMethod: 'devtools',\n    onlyCategories: ['performance'],\n  },\n};";module.exports=createConfig;const createPrimeServer=()=>"const express = require('express');\nconst path = require('path');\n\nconst app = express();\n\nconst port = 5050;\n\napp.use('/csr-report', express.static(path.join(__dirname, './reports/csr-report.html')));\napp.use('/ssr-report', express.static(path.join(__dirname, './reports/ssr-report.html')));\n\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, './primeCompare.html'));\n});\napp.listen(port, () => console.log('Listening on port 5050, ready to compare'));\n";module.exports=createPrimeServer;const returnHTML=e=>`// standard react modules\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\n// security middleware\nimport Helmet from 'react-helmet';\n// required for react router\nimport { StaticRouter } from 'react-router';\n// frontload helps when trying to render react components that need to\n// retrieve data asynchronously\nimport { Frontload, frontloadServerRender } from 'react-frontload';\nimport Loadable from 'react-loadable';\nimport path from 'path';\nimport fs from 'fs';\n\n// main entrypoint and manifest (included in CRA)\nimport App from '../${e.component}';\nimport manifest from '../build/asset-manifest.json';\n\n// export middleware that returns stringified HTML from server\nconst returnHTML = (req, res) => {\n  const injectHTML = (data, { html, title, meta, body, scripts }) => {\n    data = data.replace('<html>', \`<html \${html}>\`);\n    data = data.replace(/<title>.*?<\\/title>/g, title);\n    data = data.replace('</head>', \`\${meta}</head>\`);\n    data = data.replace(\n      '<div id="root"></div>',\n      \`<div id="root">\${body}</div>\`\n    );\n    data = data.replace('</body>', scripts.join('') + '</body>');\n\n    return data;\n  };\n\n  fs.readFile(\n    path.resolve(__dirname, '../${e.rootHtml}'),\n    'utf8',\n    (err, htmlData) => {\n      if (err) {\n        console.error('Read error', err);\n        return res.status(404).end();\n      }\n\n      // define context for react router\n      const context = {};\n      // define modules for react loadable\n      const modules = [];\n\n      frontloadServerRender(() =>\n        renderToString(\n          <Loadable.Capture report={m => modules.push(m)}>\n            <StaticRouter location={req.url} context={context}>\n              <Frontload isServer>\n                <App />\n              </Frontload>\n            </StaticRouter>\n          </Loadable.Capture>\n        )\n      ).then(routeMarkup => {\n        if (context.url) {\n          // If context has a url property, then we need to handle a redirection in Redux Router\n          res.writeHead(302, {\n            Location: context.url\n          });\n\n          res.end();\n        } else {\n          // Otherwise, we carry on...\n\n          // Let's give ourself a function to load all our page-specific JS assets for code splitting\n          const extractAssets = (assets, chunks) =>\n            Object.keys(assets)\n              .filter(asset => chunks.indexOf(asset.replace('.js', '')) > -1)\n              .map(k => assets[k]);\n\n          // Let's format those assets into pretty <script> tags\n          const extraChunks = extractAssets(manifest, modules).map(\n            c => \`<script type="text/javascript" src="/\${c}"><\/script>\`\n          );\n\n          // We need to tell Helmet to compute the right meta tags, title, and such\n          const helmet = Helmet.renderStatic();\n\n          // Pass all this nonsense into our HTML formatting function above\n          const html = injectHTML(htmlData, {\n            html: helmet.htmlAttributes.toString(),\n            title: helmet.title.toString(),\n            meta: helmet.meta.toString(),\n            body: routeMarkup,\n            scripts: extraChunks\n          });\n\n          // We have all the final HTML, let's send it to the user already!\n          res.status(200).send(html);\n        }\n      });\n    }\n  );\n}\nexport default returnHTML`;module.exports=returnHTML;const server=e=>`const express = require('express');\nconst bodyParser = require('body-parser');\nconst path = require('path');\nconst compression = require('compression');\nconst Loadable = require('react-loadable');\n\n// import middleware to return HTML on server request\nimport returnHTML from './returnHTML';\n\nconst app = express();\nconst PORT = 8080;\n\n// apply middleware\napp.use(compression());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\n/*\n  NOTE: captures all routes and returns the user's HTML \n        (may not be ideal for non-SPAs)\n*/\napp.use(express.Router().get('/', returnHTML));\napp.use(express.static(path.resolve(__dirname, \`../${e.static}\`)));\napp.use(returnHTML);\n\nLoadable.preloadAll().then(() => {\n  app.listen(PORT, () => {\n    console.log(\`Listening on \${PORT}...\`);\n  });\n});\n\napp.on('error', (err) => {\n  if (err) {\n    console.log(\`Error: \${error}\`);\n    throw err;\n  }\n});`;module.exports=server;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
